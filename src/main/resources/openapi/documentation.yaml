openapi: "3.0.3"
info:
  title: "unsessionserver API"
  description: "unsessionserver API"
  version: "1.0.0"
servers:
  - url: "https://api.unsession.su"
paths:
  /:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
  /ping:
    get:
      description: ""
      responses:
        "200":
          description: "OK"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "pong"
  /td:
    get:
      description: ""
      responses:
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "string"
  /v1/reviews/create:
    post:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
        "304":
          description: "Not Modified"
          content:
            '*/*':
              schema:
                type: "object"
  /v1/reviews/get:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Review"
  /v1/reviews/getById:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No id specified"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/Review"
  /v1/reviews/getByTeacher:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "teacherId"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Review"
  /v1/reviews/getByUser:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "userId"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Review"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
  /v1/teachers/create:
    post:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "object"
        "304":
          description: "Not Modified"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "object"
  /v1/teachers/get:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeacherDto"
  /v1/teachers/getById:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "id"
          in: "query"
          required: false
          schema:
            type: "integer"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No id specified"
        "404":
          description: "Not Found"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TeacherDto"
  /v1/teachers/search:
    get:
      description: ""
      parameters:
        - name: "Authorization"
          in: "header"
          required: false
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
        - name: "prompt"
          in: "query"
          required: false
          schema:
            type: "string"
      responses:
        "403":
          description: "Forbidden"
          content:
            '*/*':
              schema:
                type: "object"
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "No prompt specified or len < 3"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/TeacherDto"
  /v1/users/login:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UserLoginData"
        required: true
      responses:
        "401":
          description: "Unauthorized"
          content:
            '*/*':
              schema:
                type: "object"
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
  /v1/users/register:
    post:
      description: ""
      requestBody:
        content:
          '*/*':
            schema:
              $ref: "#/components/schemas/UserLoginData"
        required: true
      responses:
        "400":
          description: "Bad Request"
          content:
            '*/*':
              schema:
                type: "string"
              examples:
                Example#1:
                  value: "Invalid login data"
        "500":
          description: "Internal Server Error"
          content:
            text/plain:
              schema:
                type: "string"
              examples:
                Example#1:
                  value: ""
                Example#2:
                  value: ""
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "409":
          description: "Conflict"
          content:
            '*/*':
              schema:
                type: "object"
components:
  schemas:
    UserLoginData:
      type: "object"
      properties:
        username:
          type: "string"
        email:
          type: "string"
        password:
          type: "string"
        salt:
          type: "string"
      required:
        - "email"
        - "password"
    BanData:
      type: "object"
      properties:
        bannedUntil:
          type: "integer"
          format: "int32"
        bannedReason:
          type: "string"
      required:
        - "bannedReason"
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        userLoginData:
          $ref: "#/components/schemas/UserLoginData"
        permissions:
          type: "string"
          enum:
            - "BigRedButton"
            - "Homeworks"
            - "HomeworksAdding"
            - "Tests"
            - "TestsAdding"
            - "TestsRating"
            - "TestAnswers"
            - "Teachers"
            - "TeachersAdding"
            - "TeachersReviewing"
            - "Users"
            - "UsersAdding"
            - "UsersRemoving"
            - "UsersBlocking"
            - "UsersRolesChanging"
            - "UsersProfileInfoEditing"
            - "SS"
        roleName:
          type: "string"
        banData:
          $ref: "#/components/schemas/BanData"
        created:
          type: "integer"
          format: "int32"
        lastLogin:
          type: "integer"
          format: "int32"
        lastIp:
          type: "string"
      required:
        - "name"
        - "permissions"
        - "roleName"
    TeacherDto:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        name:
          type: "string"
        email:
          type: "string"
        department:
          type: "string"
        rating:
          type: "number"
          format: "double"
      required:
        - "name"
        - "department"
    Review:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int32"
        user:
          $ref: "#/components/schemas/User"
        teacher:
          $ref: "#/components/schemas/TeacherDto"
        globalRating:
          type: "integer"
          format: "int32"
        labsRating:
          type: "integer"
          format: "int32"
        hwRating:
          type: "integer"
          format: "int32"
        examRating:
          type: "integer"
          format: "int32"
        kindness:
          type: "integer"
          format: "int32"
        responsibility:
          type: "integer"
          format: "int32"
        individuality:
          type: "integer"
          format: "int32"
        humour:
          type: "integer"
          format: "int32"
        createdTimestamp:
          type: "integer"
          format: "int32"
        comment:
          type: "string"
      required:
        - "user"
        - "teacher"
    LoginResponse:
      type: "object"
      properties:
        token:
          type: "string"
        user:
          $ref: "#/components/schemas/User"
      required:
        - "token"
        - "user"